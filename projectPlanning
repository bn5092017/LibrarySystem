Appendix A - Project Planning
Overview
Planning is an essential part of any project.  It is particularly important to have a comprehensive plan in place for long-term and complex projects.  The planning process helps to identify and remove potential issues early in development which will result in better quality software design (Booch et al., 1998).
Rational Unified Process
The Rational Unified Process is a software design process that uses UML models to communicate how the software will be designed and how it will solve the identified problem.  This process generally starts with use cases as the process is designed from the user point of view.  It allows programmers to see what the possible uses of the software will be and to identify potential design problems before coding begins (Booch et al., 1998).
The RUP goes through four phases: inception, elaboration, construction and transition.  Each of these phases contains one or more iterations, which are full development cycles leading to a release of software, either internally within an organisation or to external customers.  The inception phase is where the potential product or problem to be solved is identified and a business case for developing a solution is put forward.  If it is considered to be worthwhile to the business to work on the proposed project, it can move forward to the next phase.  This is the elaboration phase of the project design.  This covers the detail of how the project will be designed and developed.  Detailed models of the design and use of the project will be produced and any potential risks should be identifed and planned for at this phase.  The construction phase involves further modelling, and also coding and testing of the software in preparation for deployment.  The final phase is the transition phase, which involves deployment of the software to the customer and fixing of any issues that arise.  This phase can also include development of additional non-essential software that has been identified as providing extra value to the project for the customer (Booch et al., 1998).
Working together as a team on a project is a skill that is useful for software developers to acquire.  Wells (1999) states that working in pairs on code can produce better quality code as two people will have different ideas on how to solve problems.  The diagram below shows a collaborative method of software development.  It starts with a task that has been identified which will be brainstormed in a group using Class, Responsibilities, and Collaboration (CRC) Cards.  These cards can be used by software development teams to identify parts of the software design, what these parts do and how they interact with other parts.  They are a tool used to help organise and focus group sessions.  This method of software design and development involves programming as part of a pair, which may involve also changing partners where necessary, and reworking code to produce the most efficient and simple solution to the problem.  It has an emphasis on testing and regular iterations that are checked for compatibility with the full code before moving on to the next block of code (continuous integration)(Wells, 1999).
![Diagram of software development](images/code.gif)
Planning for this project involved considering the potential product that could be developed.  Research involved looking into library catalogue requirements, current offerings of libraries, the possible technologies that could be used to provide a solution.  A Gantt chart was used to define the proposed timeline for the project.  A decision was made to use Symfony as this would speed up coding, however this has involved learning how to use this system, so there was less of a time saving gained.  The project also involved producing a thesis document which has been integrated into the Gantt chart.  This document has detailed the research undertaken, the steps involved in producing the code and the tests completed and issues that came up.
![Gantt chart for the project](images/ProjectGanttChart.jpg)
